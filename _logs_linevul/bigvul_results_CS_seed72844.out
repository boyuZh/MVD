[2023-11-16 17:56:38,802] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed72844', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=72844, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.3707
best_f1 for CS:  0.7027
best_recall:  0.7647
best_precision:  0.65
***** CS Test results *****
{'CS_accuracy': 0.8888888888888888, 'CS_ap': 0.7485896656199347, 'CS_recall': array([0.92073171, 0.73529412]), 'CS_precision': array([0.94375   , 0.65789474]), 'CS_f1': array([0.93209877, 0.69444444]), 'CS_threshold': 0.3707, 'CS_mcc': 0.6282471526574317, 'CS_cm': array([[151,  13],
       [  9,  25]])}
best_threshol:  0.3707
best_f1 for:  0.7027
best_recall:  0.7647
best_precision:  0.65
***** Test results *****
  %s = %s test_accuracy 0.8889
  %s = %s test_ap 0.7486
  %s = %s test_cm [[151  13]
 [  9  25]]
  %s = %s test_f1 0.6944
  %s = %s test_mcc 0.6282
  %s = %s test_precision 0.6579
  %s = %s test_recall 0.7353
  %s = %s test_threshold 0.3707
198 198 198 198
[2023-11-16 18:03:20,700] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed72844', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=72844, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.861
best_f1 for Python:  0.1674
best_recall:  0.4368
best_precision:  0.1035
***** Python Test results *****
{'Python_accuracy': 0.5618055555555556, 'Python_ap': 0.09467229442320632, 'Python_recall': array([0.55801922, 0.62068966]), 'Python_precision': array([0.95812183, 0.08282209]), 'Python_f1': array([0.70527791, 0.14614344]), 'Python_threshold': 0.861, 'Python_mcc': 0.08553970160172868, 'Python_cm': array([[755, 598],
       [ 33,  54]])}
best_threshold for TypeScript:  0.1495
best_f1 for TypeScript:  0.2151
best_recall:  0.8333
best_precision:  0.1235
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.5528455284552846, 'TypeScript_ap': 0.18155861920592803, 'TypeScript_recall': array([0.55855856, 0.5       ]), 'TypeScript_precision': array([0.91176471, 0.10909091]), 'TypeScript_f1': array([0.69273743, 0.17910448]), 'TypeScript_threshold': 0.1495, 'TypeScript_mcc': 0.03494674163189632, 'TypeScript_cm': array([[124,  98],
       [ 12,  12]])}
best_threshold for Java:  0.0693
best_f1 for Java:  0.1925
best_recall:  0.4824
best_precision:  0.1202
***** Java Test results *****
{'Java_accuracy': 0.8891198891198892, 'Java_ap': 0.10459741768544523, 'Java_recall': array([0.9359352 , 0.14117647]), 'Java_precision': array([0.94568452, 0.12121212]), 'Java_f1': array([0.9407846 , 0.13043478]), 'Java_threshold': 0.0693, 'Java_mcc': 0.07182278173079457, 'Java_cm': array([[1271,   87],
       [  73,   12]])}
best_threshold for CCPP:  0.8279
best_f1 for CCPP:  0.1543
best_recall:  0.4618
best_precision:  0.0926
***** CCPP Test results *****
{'CCPP_accuracy': 0.5731477265335329, 'CCPP_ap': 0.08497727704125554, 'CCPP_recall': array([0.56808219, 0.66882277]), 'CCPP_precision': array([0.97005848, 0.07577312]), 'CCPP_f1': array([0.71654428, 0.13612428]), 'CCPP_threshold': 0.8279, 'CCPP_mcc': 0.10420044789517859, 'CCPP_cm': array([[8294, 6306],
       [ 256,  517]])}
best_threshold for JavaScript:  0.991
best_f1 for JavaScript:  0.2116
best_recall:  0.389
best_precision:  0.1454
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.24717948717948718, 'JavaScript_ap': 0.13296888342766378, 'JavaScript_recall': array([0.17628661, 0.89817232]), 'JavaScript_precision': array([0.94081942, 0.10614008]), 'JavaScript_f1': array([0.29693487, 0.18984547]), 'JavaScript_threshold': 0.991, 'JavaScript_mcc': 0.05913167060773553, 'JavaScript_cm': array([[ 620, 2897],
       [  39,  344]])}
best_threshol:  0.9187
best_f1 for:  0.1714
best_recall:  0.4098
best_precision:  0.1084
***** Test results *****
  %s = %s test_accuracy 0.5358
  %s = %s test_ap 0.103
  %s = %s test_cm [[11064  9986]
 [  413   939]]
  %s = %s test_f1 0.153
  %s = %s test_mcc 0.1049
  %s = %s test_precision 0.0859
  %s = %s test_recall 0.6945
  %s = %s test_threshold 0.9187
22402 22402 22402 22402
