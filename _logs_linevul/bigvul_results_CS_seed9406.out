[2023-11-16 18:08:39,382] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed9406', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=9406, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.0036
best_f1 for CS:  0.76
best_recall:  0.7755
best_precision:  0.7451
***** CS Test results *****
{'CS_accuracy': 0.8755555555555555, 'CS_ap': 0.7570197966017658, 'CS_recall': array([0.96022727, 0.57142857]), 'CS_precision': array([0.88947368, 0.8       ]), 'CS_f1': array([0.92349727, 0.66666667]), 'CS_threshold': 0.0036, 'CS_mcc': 0.6054442283168511, 'CS_cm': array([[169,   7],
       [ 21,  28]])}
best_threshol:  0.0036
best_f1 for:  0.76
best_recall:  0.7755
best_precision:  0.7451
***** Test results *****
  %s = %s test_accuracy 0.8756
  %s = %s test_ap 0.757
  %s = %s test_cm [[169   7]
 [ 21  28]]
  %s = %s test_f1 0.6667
  %s = %s test_mcc 0.6054
  %s = %s test_precision 0.8
  %s = %s test_recall 0.5714
  %s = %s test_threshold 0.0036
225 225 225 225
[2023-11-16 18:15:16,180] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed9406', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=9406, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0071
best_f1 for Python:  0.1555
best_recall:  0.2157
best_precision:  0.1215
***** Python Test results *****
{'Python_accuracy': 0.9081081081081082, 'Python_ap': 0.08921930225555641, 'Python_recall': array([0.97314949, 0.02941176]), 'Python_precision': array([0.93125, 0.075  ]), 'Python_f1': array([0.95173882, 0.04225352]), 'Python_threshold': 0.0071, 'Python_mcc': 0.004000981694611726, 'Python_cm': array([[1341,   37],
       [  99,    3]])}
best_threshold for TypeScript:  0.0059
best_f1 for TypeScript:  0.234
best_recall:  0.4783
best_precision:  0.1549
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.7954545454545454, 'TypeScript_ap': 0.12348332535312943, 'TypeScript_recall': array([0.87817259, 0.08695652]), 'TypeScript_precision': array([0.89175258, 0.07692308]), 'TypeScript_f1': array([0.88491049, 0.08163265]), 'TypeScript_threshold': 0.0059, 'TypeScript_mcc': -0.033050080140908274, 'TypeScript_cm': array([[173,  24],
       [ 21,   2]])}
best_threshold for Java:  0.0013
best_f1 for Java:  0.1468
best_recall:  0.3368
best_precision:  0.0938
***** Java Test results *****
{'Java_accuracy': 0.9025245441795231, 'Java_ap': 0.08703929749564894, 'Java_recall': array([0.96168295, 0.07368421]), 'Java_precision': array([0.93567251, 0.12068966]), 'Java_f1': array([0.94849944, 0.09150327]), 'Java_threshold': 0.0013, 'Java_mcc': 0.04464716825875584, 'Java_cm': array([[1280,   51],
       [  88,    7]])}
best_threshold for CCPP:  0.0014
best_f1 for CCPP:  0.1388
best_recall:  0.5125
best_precision:  0.0803
***** CCPP Test results *****
{'CCPP_accuracy': 0.8681830099632931, 'CCPP_ap': 0.07676208103592211, 'CCPP_recall': array([0.90418707, 0.18050066]), 'CCPP_precision': array([0.95469774, 0.0897772 ]), 'CCPP_f1': array([0.92875616, 0.11991247]), 'CCPP_threshold': 0.0014, 'CCPP_mcc': 0.06137166757882041, 'CCPP_cm': array([[13108,  1389],
       [  622,   137]])}
best_threshold for JavaScript:  0.1811
best_f1 for JavaScript:  0.2199
best_recall:  0.5337
best_precision:  0.1385
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.6491359879789632, 'JavaScript_ap': 0.1467524237162401, 'JavaScript_recall': array([0.66842984, 0.47630923]), 'JavaScript_precision': array([0.91957105, 0.1382055 ]), 'JavaScript_f1': array([0.77414154, 0.21424565]), 'JavaScript_threshold': 0.1811, 'JavaScript_mcc': 0.0914468338946649, 'JavaScript_cm': array([[2401, 1191],
       [ 210,  191]])}
best_threshol:  0.0071
best_f1 for:  0.1622
best_recall:  0.4297
best_precision:  0.1
***** Test results *****
  %s = %s test_accuracy 0.8332
  %s = %s test_ap 0.102
  %s = %s test_cm [[18303  2692]
 [ 1040   340]]
  %s = %s test_f1 0.1541
  %s = %s test_mcc 0.083
  %s = %s test_precision 0.1121
  %s = %s test_recall 0.2464
  %s = %s test_threshold 0.0071
22375 22375 22375 22375
