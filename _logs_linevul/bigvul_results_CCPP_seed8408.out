[2023-11-17 04:06:09,366] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCCPP/seed8408', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8408, epochs=10, language='CCPP', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CCPP:  0.086
best_f1 for CCPP:  0.2836
best_recall:  0.2704
best_precision:  0.2982
***** CCPP Test results *****
{'CCPP_accuracy': 0.9505298056295911, 'CCPP_ap': 0.23941972793268923, 'CCPP_recall': array([0.99952015, 0.05157233]), 'CCPP_precision': array([0.95083143, 0.85416667]), 'CCPP_f1': array([0.97456806, 0.09727165]), 'CCPP_threshold': 0.086, 'CCPP_mcc': 0.20280372211245146, 'CCPP_cm': array([[14581,     7],
       [  754,    41]])}
best_threshol:  0.086
best_f1 for:  0.2836
best_recall:  0.2704
best_precision:  0.2982
***** Test results *****
  %s = %s test_accuracy 0.9505
  %s = %s test_ap 0.2394
  %s = %s test_cm [[14581     7]
 [  754    41]]
  %s = %s test_f1 0.0973
  %s = %s test_mcc 0.2028
  %s = %s test_precision 0.8542
  %s = %s test_recall 0.0516
  %s = %s test_threshold 0.086
15383 15383 15383 15383
[2023-11-17 12:07:42,203] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCCPP/seed8408', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8408, epochs=10, language='Python,TypeScript,Java,CS,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0262
best_f1 for Python:  0.239
best_recall:  0.5213
best_precision:  0.1551
***** Python Test results *****
{'Python_accuracy': 0.9349930843706777, 'Python_ap': 0.11856946504952337, 'Python_recall': array([1., 0.]), 'Python_precision': array([0.93499308, 0.        ]), 'Python_f1': array([0.96640457, 0.        ]), 'Python_threshold': 0.0262, 'Python_mcc': 0.0, 'Python_cm': array([[1352,    0],
       [  94,    0]])}
best_threshold for TypeScript:  0.0119
best_f1 for TypeScript:  0.3953
best_recall:  0.7727
best_precision:  0.2656
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.9098360655737705, 'TypeScript_ap': 0.24159909938470783, 'TypeScript_recall': array([1., 0.]), 'TypeScript_precision': array([0.90983607, 0.        ]), 'TypeScript_f1': array([0.9527897, 0.       ]), 'TypeScript_threshold': 0.0119, 'TypeScript_mcc': 0.0, 'TypeScript_cm': array([[222,   0],
       [ 22,   0]])}
best_threshold for Java:  0.0177
best_f1 for Java:  0.295
best_recall:  0.4237
best_precision:  0.2262
***** Java Test results *****
{'Java_accuracy': 0.9232365145228216, 'Java_ap': 0.24124153010523813, 'Java_recall': array([1.        , 0.05932203]), 'Java_precision': array([0.9228631, 1.       ]), 'Java_f1': array([0.95988435, 0.112     ]), 'Java_threshold': 0.0177, 'Java_mcc': 0.23397887952674892, 'Java_cm': array([[1328,    0],
       [ 111,    7]])}
best_threshold for CS:  0.0157
best_f1 for CS:  0.5
best_recall:  0.5227
best_precision:  0.4792
***** CS Test results *****
{'CS_accuracy': 0.7821782178217822, 'CS_ap': 0.41106345704599895, 'CS_recall': array([1., 0.]), 'CS_precision': array([0.78217822, 0.        ]), 'CS_f1': array([0.87777778, 0.        ]), 'CS_threshold': 0.0157, 'CS_mcc': 0.0, 'CS_cm': array([[158,   0],
       [ 44,   0]])}
best_threshold for JavaScript:  0.064
best_f1 for JavaScript:  0.2698
best_recall:  0.3726
best_precision:  0.2115
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.9069347770043825, 'JavaScript_ap': 0.20779393880409538, 'JavaScript_recall': array([0.99971542, 0.01369863]), 'JavaScript_precision': array([0.9070488 , 0.83333333]), 'JavaScript_f1': array([0.95113036, 0.02695418]), 'JavaScript_threshold': 0.064, 'JavaScript_mcc': 0.09965704201792701, 'JavaScript_cm': array([[3513,    1],
       [ 360,    5]])}
best_threshol:  0.0249
best_f1 for:  0.2398
best_recall:  0.5412
best_precision:  0.154
***** Test results *****
  %s = %s test_accuracy 0.9124
  %s = %s test_ap 0.1914
  %s = %s test_cm [[6573    1]
 [ 631   12]]
  %s = %s test_f1 0.0366
  %s = %s test_mcc 0.1244
  %s = %s test_precision 0.9231
  %s = %s test_recall 0.0187
  %s = %s test_threshold 0.0249
7217 7217 7217 7217
