[2023-11-16 17:44:37,738] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed25569', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=25569, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.0233
best_f1 for CS:  0.6889
best_recall:  0.6739
best_precision:  0.7045
***** CS Test results *****
{'CS_accuracy': 0.8640776699029126, 'CS_ap': 0.7485752634559811, 'CS_recall': array([0.975     , 0.47826087]), 'CS_precision': array([0.86666667, 0.84615385]), 'CS_f1': array([0.91764706, 0.61111111]), 'CS_threshold': 0.0233, 'CS_mcc': 0.5684132699761238, 'CS_cm': array([[156,   4],
       [ 24,  22]])}
best_threshol:  0.0233
best_f1 for:  0.6889
best_recall:  0.6739
best_precision:  0.7045
***** Test results *****
  %s = %s test_accuracy 0.8641
  %s = %s test_ap 0.7486
  %s = %s test_cm [[156   4]
 [ 24  22]]
  %s = %s test_f1 0.6111
  %s = %s test_mcc 0.5684
  %s = %s test_precision 0.8462
  %s = %s test_recall 0.4783
  %s = %s test_threshold 0.0233
206 206 206 206
[2023-11-16 17:51:21,486] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed25569', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=25569, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0004
best_f1 for Python:  0.1287
best_recall:  0.9802
best_precision:  0.0689
***** Python Test results *****
{'Python_accuracy': 0.9226110363391655, 'Python_ap': 0.05478464379720323, 'Python_recall': array([0.98916968, 0.00990099]), 'Python_precision': array([0.93197279, 0.0625    ]), 'Python_f1': array([0.95971979, 0.01709402]), 'Python_threshold': 0.0004, 'Python_mcc': -0.0022664133517777676, 'Python_cm': array([[1370,   15],
       [ 100,    1]])}
best_threshold for TypeScript:  0.0016
best_f1 for TypeScript:  0.1765
best_recall:  0.4737
best_precision:  0.1084
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.884, 'TypeScript_ap': 0.0850162369022694, 'TypeScript_recall': array([0.95670996, 0.        ]), 'TypeScript_precision': array([0.92083333, 0.        ]), 'TypeScript_f1': array([0.93842887, 0.        ]), 'TypeScript_threshold': 0.0016, 'TypeScript_mcc': -0.05854168110951741, 'TypeScript_cm': array([[221,  10],
       [ 19,   0]])}
best_threshold for Java:  0.0003
best_f1 for Java:  0.1132
best_recall:  1.0
best_precision:  0.06
***** Java Test results *****
{'Java_accuracy': 0.9344947735191638, 'Java_ap': 0.054747827722937195, 'Java_recall': array([0.99406968, 0.        ]), 'Java_precision': array([0.93973371, 0.        ]), 'Java_f1': array([0.96613833, 0.        ]), 'Java_threshold': 0.0003, 'Java_mcc': -0.01890498154426018, 'Java_cm': array([[1341,    8],
       [  86,    0]])}
best_threshold for CCPP:  0.0078
best_f1 for CCPP:  0.1105
best_recall:  0.4223
best_precision:  0.0636
***** CCPP Test results *****
{'CCPP_accuracy': 0.8443325266531493, 'CCPP_ap': 0.0681034138795904, 'CCPP_recall': array([0.87945168, 0.18393782]), 'CCPP_precision': array([0.95297455, 0.07505285]), 'CCPP_f1': array([0.91473812, 0.10660661]), 'CCPP_threshold': 0.0078, 'CCPP_mcc': 0.042150242553711074, 'CCPP_cm': array([[12767,  1750],
       [  630,   142]])}
best_threshold for JavaScript:  0.0722
best_f1 for JavaScript:  0.1936
best_recall:  0.3615
best_precision:  0.1322
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.7577529232333503, 'JavaScript_ap': 0.13096775933460492, 'JavaScript_recall': array([0.80759494, 0.29023747]), 'JavaScript_precision': array([0.91433121, 0.13853904]), 'JavaScript_f1': array([0.85765497, 0.18755328]), 'JavaScript_threshold': 0.0722, 'JavaScript_mcc': 0.07191956575132886, 'JavaScript_cm': array([[2871,  684],
       [ 269,  110]])}
best_threshol:  0.4543
best_f1 for:  0.1266
best_recall:  0.1945
best_precision:  0.0938
***** Test results *****
  %s = %s test_accuracy 0.8405
  %s = %s test_ap 0.0817
  %s = %s test_cm [[18570  2467]
 [ 1104   253]]
  %s = %s test_f1 0.1241
  %s = %s test_mcc 0.0505
  %s = %s test_precision 0.093
  %s = %s test_recall 0.1864
  %s = %s test_threshold 0.4543
22394 22394 22394 22394
