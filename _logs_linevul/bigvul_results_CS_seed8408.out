[2023-11-16 17:47:40,122] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed8408', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8408, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.9871
best_f1 for CS:  0.7042
best_recall:  0.5682
best_precision:  0.9259
***** CS Test results *****
{'CS_accuracy': 0.8811881188118812, 'CS_ap': 0.7925918422404603, 'CS_recall': array([0.96202532, 0.59090909]), 'CS_precision': array([0.89411765, 0.8125    ]), 'CS_f1': array([0.92682927, 0.68421053]), 'CS_threshold': 0.9871, 'CS_mcc': 0.6250705639445605, 'CS_cm': array([[152,   6],
       [ 18,  26]])}
best_threshol:  0.9871
best_f1 for:  0.7042
best_recall:  0.5682
best_precision:  0.9259
***** Test results *****
  %s = %s test_accuracy 0.8812
  %s = %s test_ap 0.7926
  %s = %s test_cm [[152   6]
 [ 18  26]]
  %s = %s test_f1 0.6842
  %s = %s test_mcc 0.6251
  %s = %s test_precision 0.8125
  %s = %s test_recall 0.5909
  %s = %s test_threshold 0.9871
202 202 202 202
[2023-11-16 17:54:24,788] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed8408', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8408, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.3972
best_f1 for Python:  0.1794
best_recall:  0.2128
best_precision:  0.155
***** Python Test results *****
{'Python_accuracy': 0.876210235131397, 'Python_ap': 0.11022659571027628, 'Python_recall': array([0.92455621, 0.18085106]), 'Python_precision': array([0.94197438, 0.14285714]), 'Python_f1': array([0.93318402, 0.15962441]), 'Python_threshold': 0.3972, 'Python_mcc': 0.09456140669259908, 'Python_cm': array([[1250,  102],
       [  77,   17]])}
best_threshold for TypeScript:  0.0002
best_f1 for TypeScript:  0.2621
best_recall:  0.8636
best_precision:  0.1545
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.8442622950819673, 'TypeScript_ap': 0.14552684793724657, 'TypeScript_recall': array([0.91891892, 0.09090909]), 'TypeScript_precision': array([0.91071429, 0.1       ]), 'TypeScript_f1': array([0.91479821, 0.0952381 ]), 'TypeScript_threshold': 0.0002, 'TypeScript_mcc': 0.010261583956685503, 'TypeScript_cm': array([[204,  18],
       [ 20,   2]])}
best_threshold for Java:  1e-04
best_f1 for Java:  0.1547
best_recall:  0.6102
best_precision:  0.0886
***** Java Test results *****
{'Java_accuracy': 0.9114799446749654, 'Java_ap': 0.08394420139395349, 'Java_recall': array([0.99246988, 0.        ]), 'Java_precision': array([0.9178273, 0.       ]), 'Java_f1': array([0.9536903, 0.       ]), 'Java_threshold': 1e-04, 'Java_mcc': -0.024875094894451905, 'Java_cm': array([[1318,   10],
       [ 118,    0]])}
best_threshold for CCPP:  0.0005
best_f1 for CCPP:  0.1401
best_recall:  0.3296
best_precision:  0.089
***** CCPP Test results *****
{'CCPP_accuracy': 0.9259572255086784, 'CCPP_ap': 0.07623614525217284, 'CCPP_recall': array([0.97367699, 0.05031447]), 'CCPP_precision': array([0.94952871, 0.09433962]), 'CCPP_f1': array([0.96145125, 0.06562756]), 'CCPP_threshold': 0.0005, 'CCPP_mcc': 0.0324417231362113, 'CCPP_cm': array([[14204,   384],
       [  755,    40]])}
best_threshold for JavaScript:  0.9979
best_f1 for JavaScript:  0.2194
best_recall:  0.4219
best_precision:  0.1482
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.5609693219902037, 'JavaScript_ap': 0.1423917313852782, 'JavaScript_recall': array([0.5591918 , 0.57808219]), 'JavaScript_precision': array([0.92732421, 0.11988636]), 'JavaScript_f1': array([0.69767442, 0.19858824]), 'JavaScript_threshold': 0.9979, 'JavaScript_mcc': 0.08050331690079224, 'JavaScript_cm': array([[1965, 1549],
       [ 154,  211]])}
best_threshol:  0.0011
best_f1 for:  0.1631
best_recall:  0.3831
best_precision:  0.1036
***** Test results *****
  %s = %s test_accuracy 0.8577
  %s = %s test_ap 0.1004
  %s = %s test_cm [[18941  2063]
 [ 1124   270]]
  %s = %s test_f1 0.1449
  %s = %s test_mcc 0.0755
  %s = %s test_precision 0.1157
  %s = %s test_recall 0.1937
  %s = %s test_threshold 0.0011
22398 22398 22398 22398
