[2023-11-16 18:11:39,566] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed6088', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=6088, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.0078
best_f1 for CS:  0.7115
best_recall:  0.6607
best_precision:  0.7708
***** CS Test results *****
{'CS_accuracy': 0.8626609442060086, 'CS_ap': 0.7597258170869212, 'CS_recall': array([0.96045198, 0.55357143]), 'CS_precision': array([0.87179487, 0.81578947]), 'CS_f1': array([0.91397849, 0.65957447]), 'CS_threshold': 0.0078, 'CS_mcc': 0.594503529978225, 'CS_cm': array([[170,   7],
       [ 25,  31]])}
best_threshol:  0.0078
best_f1 for:  0.7115
best_recall:  0.6607
best_precision:  0.7708
***** Test results *****
  %s = %s test_accuracy 0.8627
  %s = %s test_ap 0.7598
  %s = %s test_cm [[170   7]
 [ 25  31]]
  %s = %s test_f1 0.6596
  %s = %s test_mcc 0.5945
  %s = %s test_precision 0.8158
  %s = %s test_recall 0.5536
  %s = %s test_threshold 0.0078
233 233 233 233
[2023-11-16 18:18:13,143] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed6088', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=6088, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0003
best_f1 for Python:  0.1179
best_recall:  0.9425
best_precision:  0.0629
***** Python Test results *****
{'Python_accuracy': 0.9181692094313454, 'Python_ap': 0.06415354994082326, 'Python_recall': array([0.97490775, 0.03448276]), 'Python_precision': array([0.94021352, 0.08108108]), 'Python_f1': array([0.95724638, 0.0483871 ]), 'Python_threshold': 0.0003, 'Python_mcc': 0.014140973968916315, 'Python_cm': array([[1321,   34],
       [  84,    3]])}
best_threshold for TypeScript:  0.0004
best_f1 for TypeScript:  0.1212
best_recall:  0.6667
best_precision:  0.0667
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.9123505976095617, 'TypeScript_ap': 0.05526542575480587, 'TypeScript_recall': array([0.97033898, 0.        ]), 'TypeScript_precision': array([0.93852459, 0.        ]), 'TypeScript_f1': array([0.95416667, 0.        ]), 'TypeScript_threshold': 0.0004, 'TypeScript_mcc': -0.04270155937555021, 'TypeScript_cm': array([[229,   7],
       [ 15,   0]])}
best_threshold for Java:  0.0003
best_f1 for Java:  0.1414
best_recall:  0.551
best_precision:  0.0811
***** Java Test results *****
{'Java_accuracy': 0.920863309352518, 'Java_ap': 0.07869392428467713, 'Java_recall': array([0.99071207, 0.        ]), 'Java_precision': array([0.92888244, 0.        ]), 'Java_f1': array([0.9588015, 0.       ]), 'Java_threshold': 0.0003, 'Java_mcc': -0.02570086824681692, 'Java_cm': array([[1280,   12],
       [  98,    0]])}
best_threshold for CCPP:  0.4434
best_f1 for CCPP:  0.132
best_recall:  0.381
best_precision:  0.0798
***** CCPP Test results *****
{'CCPP_accuracy': 0.7400378269092807, 'CCPP_ap': 0.07214383795666285, 'CCPP_recall': array([0.76126499, 0.36385836]), 'CCPP_precision': array([0.95496975, 0.07919213]), 'CCPP_f1': array([0.84718601, 0.1300742 ]), 'CCPP_threshold': 0.4434, 'CCPP_mcc': 0.06537927239104854, 'CCPP_cm': array([[11049,  3465],
       [  521,   298]])}
best_threshold for JavaScript:  0.9517
best_f1 for JavaScript:  0.1949
best_recall:  0.2183
best_precision:  0.1761
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.7384810126582279, 'JavaScript_ap': 0.1296049293932801, 'JavaScript_recall': array([0.78262084, 0.31266846]), 'JavaScript_precision': array([0.91655759, 0.12975391]), 'JavaScript_f1': array([0.84431047, 0.18339921]), 'JavaScript_threshold': 0.9517, 'JavaScript_mcc': 0.06643034992199011, 'JavaScript_cm': array([[2801,  778],
       [ 255,  116]])}
best_threshol:  0.4377
best_f1 for:  0.1381
best_recall:  0.3137
best_precision:  0.0886
***** Test results *****
  %s = %s test_accuracy 0.7644
  %s = %s test_ap 0.0805
  %s = %s test_cm [[16680  4296]
 [  973   417]]
  %s = %s test_f1 0.1367
  %s = %s test_mcc 0.0564
  %s = %s test_precision 0.0885
  %s = %s test_recall 0.3
  %s = %s test_threshold 0.4377
22366 22366 22366 22366
