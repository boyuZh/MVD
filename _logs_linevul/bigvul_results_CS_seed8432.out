[2023-11-16 17:59:39,006] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed8432', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8432, epochs=10, language='CS', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CS:  0.5572
best_f1 for CS:  0.7077
best_recall:  0.6571
best_precision:  0.7667
***** CS Test results *****
{'CS_accuracy': 0.8791208791208791, 'CS_ap': 0.7849902766007985, 'CS_recall': array([0.93197279, 0.65714286]), 'CS_precision': array([0.91946309, 0.6969697 ]), 'CS_f1': array([0.92567568, 0.67647059]), 'CS_threshold': 0.5572, 'CS_mcc': 0.6026194471219187, 'CS_cm': array([[137,  10],
       [ 12,  23]])}
best_threshol:  0.5572
best_f1 for:  0.7077
best_recall:  0.6571
best_precision:  0.7667
***** Test results *****
  %s = %s test_accuracy 0.8791
  %s = %s test_ap 0.785
  %s = %s test_cm [[137  10]
 [ 12  23]]
  %s = %s test_f1 0.6765
  %s = %s test_mcc 0.6026
  %s = %s test_precision 0.697
  %s = %s test_recall 0.6571
  %s = %s test_threshold 0.5572
182 182 182 182
[2023-11-16 18:06:22,895] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCS/seed8432', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=8432, epochs=10, language='Python,TypeScript,Java,CCPP,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0676
best_f1 for Python:  0.164
best_recall:  0.3462
best_precision:  0.1075
***** Python Test results *****
{'Python_accuracy': 0.8907734056987788, 'Python_ap': 0.11711226602538938, 'Python_recall': array([0.94817518, 0.13461538]), 'Python_precision': array([0.93520518, 0.16470588]), 'Python_f1': array([0.94164552, 0.14814815]), 'Python_threshold': 0.0676, 'Python_mcc': 0.09094885270473438, 'Python_cm': array([[1299,   71],
       [  90,   14]])}
best_threshold for TypeScript:  0.5154
best_f1 for TypeScript:  0.2778
best_recall:  0.3571
best_precision:  0.2273
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.8805309734513275, 'TypeScript_ap': 0.26156720808627704, 'TypeScript_recall': array([0.91509434, 0.35714286]), 'TypeScript_precision': array([0.95566502, 0.2173913 ]), 'TypeScript_f1': array([0.93493976, 0.27027027]), 'TypeScript_threshold': 0.5154, 'TypeScript_mcc': 0.21705384097868166, 'TypeScript_cm': array([[194,  18],
       [  9,   5]])}
best_threshold for Java:  0.0177
best_f1 for Java:  0.1673
best_recall:  0.2396
best_precision:  0.1285
***** Java Test results *****
{'Java_accuracy': 0.9260042283298098, 'Java_ap': 0.09637208204149864, 'Java_recall': array([0.99244142, 0.01041667]), 'Java_precision': array([0.93252841, 0.09090909]), 'Java_f1': array([0.96155254, 0.01869159]), 'Java_threshold': 0.0177, 'Java_mcc': 0.00818452380952381, 'Java_cm': array([[1313,   10],
       [  95,    1]])}
best_threshold for CCPP:  0.6431
best_f1 for CCPP:  0.1806
best_recall:  0.3728
best_precision:  0.1192
***** CCPP Test results *****
{'CCPP_accuracy': 0.7929738138449572, 'CCPP_ap': 0.0976653706435747, 'CCPP_recall': array([0.81232072, 0.43256997]), 'CCPP_precision': array([0.96385737, 0.11010363]), 'CCPP_f1': array([0.88162479, 0.17552917]), 'CCPP_threshold': 0.6431, 'CCPP_mcc': 0.1345821722096057, 'CCPP_cm': array([[11894,  2748],
       [  446,   340]])}
best_threshold for JavaScript:  0.8809
best_f1 for JavaScript:  0.216
best_recall:  0.3324
best_precision:  0.16
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.6264531128907259, 'JavaScript_ap': 0.133599703428239, 'JavaScript_recall': array([0.6406518 , 0.49329759]), 'JavaScript_precision': array([0.92222222, 0.1276891 ]), 'JavaScript_f1': array([0.75607287, 0.20286659]), 'JavaScript_threshold': 0.8809, 'JavaScript_mcc': 0.08176546774369348, 'JavaScript_cm': array([[2241, 1257],
       [ 189,  184]])}
best_threshol:  0.6755
best_f1 for:  0.1838
best_recall:  0.3321
best_precision:  0.1271
***** Test results *****
  %s = %s test_accuracy 0.78
  %s = %s test_ap 0.1065
  %s = %s test_cm [[16941  4104]
 [  829   544]]
  %s = %s test_f1 0.1807
  %s = %s test_mcc 0.119
  %s = %s test_precision 0.117
  %s = %s test_recall 0.3962
  %s = %s test_threshold 0.6755
22418 22418 22418 22418
