[2023-11-16 18:32:42,287] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCCPP/seed43', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=True, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=43, epochs=10, language='CCPP', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for CCPP:  0.1459
best_f1 for CCPP:  0.2273
best_recall:  0.3178
best_precision:  0.177
***** CCPP Test results *****
{'CCPP_accuracy': 0.9485810986722207, 'CCPP_ap': 0.15001865045384216, 'CCPP_recall': array([0.99603147, 0.02269693]), 'CCPP_precision': array([0.95212244, 0.22666667]), 'CCPP_f1': array([0.97358213, 0.04126214]), 'CCPP_threshold': 0.1459, 'CCPP_mcc': 0.05786565988733569, 'CCPP_cm': array([[14557,    58],
       [  732,    17]])}
best_threshol:  0.1459
best_f1 for:  0.2273
best_recall:  0.3178
best_precision:  0.177
***** Test results *****
  %s = %s test_accuracy 0.9486
  %s = %s test_ap 0.15
  %s = %s test_cm [[14557    58]
 [  732    17]]
  %s = %s test_f1 0.0413
  %s = %s test_mcc 0.0579
  %s = %s test_precision 0.2267
  %s = %s test_recall 0.0227
  %s = %s test_threshold 0.1459
15364 15364 15364 15364
[2023-11-17 02:30:51,019] [INFO] [real_accelerator.py:158:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Namespace(data_file='/hpcfs/users/a1232991/Data/CVESingle/CVEALL.csv', output_dir='./saved_models/ourCCPP/seed43', model_type='roberta', block_size=512, model_name='model.bin', model_name_or_path='microsoft/codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='microsoft/codebert-base', code_length=256, post_adjust=False, do_train=False, do_eval=False, do_test=True, debug=False, evaluate_during_training=True, do_local_explanation=False, reasoning_method=None, train_batch_size=16, eval_batch_size=16, gradient_accumulation_steps=1, learning_rate=2e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=43, epochs=10, language='Python,TypeScript,Java,CS,JavaScript', resume=None, effort_at_top_k=0.2, top_k_recall_by_lines=0.01, top_k_recall_by_pred_prob=0.2, do_sorting_by_line_scores=False, do_sorting_by_pred_prob=False, logits_adjust=False, top_k_constant=10, num_attention_heads=12, write_raw_preds=False, use_word_level_tokenizer=False, use_non_pretrained_tokenizer=False, n_gpu=1, device=device(type='cuda'))
best_threshold for Python:  0.0674
best_f1 for Python:  0.247
best_recall:  0.4595
best_precision:  0.1689
***** Python Test results *****
{'Python_accuracy': 0.9241285030758715, 'Python_ap': 0.13656430772486278, 'Python_recall': array([1., 0.]), 'Python_precision': array([0.9241285, 0.       ]), 'Python_f1': array([0.96056838, 0.        ]), 'Python_threshold': 0.0674, 'Python_mcc': 0.0, 'Python_cm': array([[1352,    0],
       [ 111,    0]])}
best_threshold for TypeScript:  0.1819
best_f1 for TypeScript:  0.3077
best_recall:  0.1818
best_precision:  1.0
***** TypeScript Test results *****
{'TypeScript_accuracy': 0.9533898305084746, 'TypeScript_ap': 0.2656487275121779, 'TypeScript_recall': array([1., 0.]), 'TypeScript_precision': array([0.95338983, 0.        ]), 'TypeScript_f1': array([0.97613883, 0.        ]), 'TypeScript_threshold': 0.1819, 'TypeScript_mcc': 0.0, 'TypeScript_cm': array([[225,   0],
       [ 11,   0]])}
best_threshold for Java:  0.0603
best_f1 for Java:  0.2186
best_recall:  0.54
best_precision:  0.1371
***** Java Test results *****
{'Java_accuracy': 0.9301187980433263, 'Java_ap': 0.12757058942429586, 'Java_recall': array([1., 0.]), 'Java_precision': array([0.9301188, 0.       ]), 'Java_f1': array([0.96379435, 0.        ]), 'Java_threshold': 0.0603, 'Java_mcc': 0.0, 'Java_cm': array([[1331,    0],
       [ 100,    0]])}
best_threshold for CS:  0.0507
best_f1 for CS:  0.4453
best_recall:  0.9833
best_precision:  0.2878
***** CS Test results *****
{'CS_accuracy': 0.7368421052631579, 'CS_ap': 0.4363763627677426, 'CS_recall': array([1., 0.]), 'CS_precision': array([0.73684211, 0.        ]), 'CS_f1': array([0.84848485, 0.        ]), 'CS_threshold': 0.0507, 'CS_mcc': 0.0, 'CS_cm': array([[168,   0],
       [ 60,   0]])}
best_threshold for JavaScript:  0.0805
best_f1 for JavaScript:  0.2225
best_recall:  0.4634
best_precision:  0.1464
***** JavaScript Test results *****
{'JavaScript_accuracy': 0.9048233169976786, 'JavaScript_ap': 0.13745006427246886, 'JavaScript_recall': array([1., 0.]), 'JavaScript_precision': array([0.90482332, 0.        ]), 'JavaScript_f1': array([0.95003385, 0.        ]), 'JavaScript_threshold': 0.0805, 'JavaScript_mcc': 0.0, 'JavaScript_cm': array([[3508,    0],
       [ 369,    0]])}
best_threshol:  0.0673
best_f1 for:  0.2208
best_recall:  0.5131
best_precision:  0.1406
***** Test results *****
  %s = %s test_accuracy 0.91
  %s = %s test_ap 0.1412
  %s = %s test_cm [[6584    0]
 [ 651    0]]
  %s = %s test_f1 0.0
  %s = %s test_mcc 0.0
  %s = %s test_precision 0.0
  %s = %s test_recall 0.0
  %s = %s test_threshold 0.0673
7235 7235 7235 7235
